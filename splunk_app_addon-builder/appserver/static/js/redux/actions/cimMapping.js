import Actions from "app/redux/templateClass/Actions";
import { TABLE_ACTIONS } from "app/redux/shared/TableActions";
let cimMappingActions = new Actions("cim");

cimMappingActions.addActions([
    "CLEAR_ERROR",
    "CLEAR_EPIC_STATUS",
    "SET_NAVIGATION",

    "CLEAR_CURRENT_EVENTTYPE_INFO",
    "SET_CURRENT_EVENTTYPE_INFO",
    "START_EVENTTYPE_SEARCH",

    "SET_EVENTTYPE_MAPPING_TABLE_MODE",

    "CLEAR_CURRENT_KNOWLEDGE_OBJECT_FOR_CREATING",
    "SET_CURRENT_KNOWLEDGE_OBJECT_FOR_CREATING",
    "CLEAR_CURRENT_KNOWLEDGE_OBJECT_FOR_UPDATING",
    "SET_CURRENT_KNOWLEDGE_OBJECT_FOR_UPDATING",

    "APPEND_MAPPING_TABLE_CIM_FIELD",
    "APPEND_MAPPING_TABLE_EVENT_TYPE_FIELD",

    "SET_MAPPING_TABLE_HIGHLIGHT_OUTPUT",
    "SET_MAPPING_TABLE_HIGHLIGHT_INPUT",

    // select model action
    "TOGGLE_MODEL_CANDIDATE",
    "SET_MODEL_CANDIDATE",
    "CLEAR_MODEL_CANDIDATE",

    // Tree action
    "ACTIVATE_ALL_TREE_STATE",
    "CLEAR_TREE_STATE",
    "SET_TREE_STATE",
    "SET_MODEL_FILTER",

    "FILTER_EVENTTYPE_FIELD_VALUES",
    "FILTER_SELECTED_CIM_MODEL"
]);

cimMappingActions.getSubActions("masterTable").addActions(TABLE_ACTIONS);

cimMappingActions.addAsyncActions([
    "GET_EVENTTYPE_INFO$",
    "CREATE_EVENTTYPE$",
    "UPDATE_EVENTTYPE$",
    "DELETE_EVENTTYPE$",
    "GET_EVENTTYPE_FIELD_VALUES$",
    "GET_EVENTTYPE_KNOWLEDGE_OBJECTS$",
    "CREATE_EVENTTYPE_EVAL$",
    "UPDATE_EVENTTYPE_EVAL$",
    "DELETE_EVENTTYPE_EVAL$",
    "CREATE_EVENTTYPE_ALIAS$",
    "UPDATE_EVENTTYPE_ALIAS$",
    "DELETE_EVENTTYPE_ALIAS$",
    "GET_APP_SOURCETYPES_FROM_CONF$",
    "GET_TREE_DATA$",
    "DELETE_EVENTTYPE_INFO$",
    "SAVE_SELECTED_CIM_MODEL$"
]);

export default cimMappingActions;
