[validate]
name = validate
example =  This example runs a simple check for valid ports: ... | eval n=validate(isint(port), "ERROR: Port is not an integer",  port >= 1 AND port <= 65535, "ERROR: Port is out of range") 
category = Comparison_and_Conditional_functions
description = This function takes pairs of arguments, Boolean expressions X and strings Y. The function returns the string Y corresponding to the first expression X that evaluates to False and defaults to NULL if all are True. 
expression = validate(X,Y,...) 

[true]
name = true
example = This example shows how to use the true() function to provide a default to a case function. ... | eval error=case(status == 200, "OK", status == 404, "Not found", true(), "Other") 
category = Comparison_and_Conditional_functions
description = This function enables you to specify a conditional that is obviously true, for example  1==1. You do not specify a field with this function. 
expression = true() 

[searchmatch]
name = searchmatch
example =  ... | eval n=searchmatch("foo AND bar") 
category = Comparison_and_Conditional_functions
description = This function takes one argument X, which is a search string. The function returns true IF AND ONLY IF the event matches the search string. 
expression = searchmatch(X) 

[nullif]
name = nullif
example =  ... | eval n=nullif(fieldA,fieldB) 
category = Comparison_and_Conditional_functions
description =  This function is used to compare fields.  The function takes two arguments, X and Y, and returns NULL if X = Y.  Otherwise it returns X. 
expression =  nullif(X,Y) 

[null]
name = null
example =  
category = Comparison_and_Conditional_functions
description =  This function takes no arguments and returns NULL. The evaluation engine uses NULL to represent "no value". Setting a field to NULL clears the field value. 
expression =  null() 

[match]
name = match
example =  This example returns true IF AND ONLY IF field matches the basic pattern of an IP address. Note that the example uses ^ and $ to perform a full match. ... | eval n=if(match(field, "^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$"), 1, 0) 
category = Comparison_and_Conditional_functions
description = This function compares the regex string REGEX to the value of SUBJECT and returns a Boolean value. It returns true if the REGEX can find a match against any substring of SUBJECT. 
expression = match(SUBJECT, "REGEX") 

[like]
name = like
example =  This example returns islike=TRUE if the field value starts with foo: ... | eval is_a_foo=if(like(field, "foo%"), "yes a foo", "not a foo") or ... | where like(field, "foo%") 
category = Comparison_and_Conditional_functions
description = This function takes two arguments, a string to match TEXT and a match expression string PATTERN.  It returns TRUE if and only if the first argument is like the SQLite pattern in Y.  The pattern language supports exact text match, as well as % characters for wildcards and _ characters for a single character match. 
expression = like(TEXT, PATTERN) 

[if]
name = if
example = This example looks at the values of error and returns err=OK if error=200, otherwise returns err=Error: ... | eval err=if(error == 200, "OK", "Error") 
category = Comparison_and_Conditional_functions
description = This function takes three arguments. The first argument X must be a Boolean expression. If X evaluates to TRUE, the result is the second argument Y. If, X evaluates to FALSE, the result evaluates to the third argument Z. 
expression = if(X,Y,Z) 

[false]
name = false
example =  
category = Comparison_and_Conditional_functions
description = This function enables you to specify a conditional that is obviously false, for example  1==0. You do not specify a field with this function. 
expression = false() 

[coalesce]
name = coalesce
example =  Let's say you have a set of events where the IP address is extracted to either clientip or ipaddress. This example defines a new field called ip, that takes the value of either clientip or ipaddress, depending on which is not NULL (exists in that event): ... | eval ip=coalesce(clientip,ipaddress) 
category = Comparison_and_Conditional_functions
description = This function takes an arbitrary number of arguments and returns the first value that is not null. 
expression = coalesce(X,...) 

[cidrmatch]
name = cidrmatch
example =  This example uses cidrmatch to set a field, isLocal, to "local" if the field ip matches the subnet, or "not local" if it does not: ... | eval isLocal=if(cidrmatch("123.132.32.0/25",ip), "local", "not local") This example uses cidrmatch as a filter: ... | where cidrmatch("123.132.32.0/25", ip) 
category = Comparison_and_Conditional_functions
description = This function returns true, when IP address Y belongs to a particular subnet X. The function uses two string arguments: the first is the CIDR subnet; the second is the IP address to match.  This function is compatible with IPv6. 
expression = cidrmatch("X",Y) 

[case]
name = case
example =  This example returns descriptions for the corresponding http status code: ... | eval description=case(error == 404, "Not found", error == 500, "Internal Server Error", error == 200, "OK") 
category = Comparison_and_Conditional_functions
description = This function takes pairs of arguments X and Y. The X arguments are Boolean expressions that will be evaluated from first to last.  When the first X expression is encountered that evaluates to TRUE, the corresponding Y argument will be returned. The function defaults to NULL if none are true. 
expression = case(X,"Y",...) 

[tostring]
name = tostring
example = This example returns "True 0xF 12,345.68": ... | eval n=tostring(1==1) + " " + tostring(15, "hex") + " "  + tostring(12345.6789, "commas") This example returns foo=615 and foo2=00:10:15: ... | eval foo=615 | eval foo2 = tostring(foo, "duration") This example formats the column totalSales to display values with a currency symbol and commas. You must use a period between the currency value and the tostring function. ...| fieldformat totalSales="$".tostring(totalSales,"commas") Note: When used with the eval command, the values might not sort as expected because the values are converted to ASCII. Use the fieldformat command with the tostring function to format the displayed values.  The underlying values are not changed with the fieldformat command. 
category = Conversion_functions
description = This function converts the input value to a string. If the input value is a number, it reformats it as a string. If the input value is a Boolean value, it returns the corresponding string value, "True" or "False". This function requires at least one argument X; if X is a number, the second argument Y is optional and can be "hex" "commas" or "duration": tostring(X,"hex") converts X to hexadecimal. tostring(X,"commas") formats X with commas and, if the number includes decimals, rounds to nearest two decimal places. tostring(X,"duration") converts seconds X to readable time format HH:MM:SS. 
expression = tostring(X,Y) 

[tonumber]
name = tonumber
example = This example returns the string values in the field store_sales: ... | eval n=tonumber(store_sales) This example returns "164": ... | eval n=tonumber("0A4",16) This example trims any leading or trailing spaces from the values in the celsius field before converting it to a number: ... | eval temperature=tonumber(trim(celsius)) 
category = Conversion_functions
description =  This function converts the input string NUMSTR to a number. NUMSTR can be a field name or a value. BASE is optional and used to define the base of the number to convert to. BASE can be 2 to 36, and defaults to 10. If the tonumber function cannot parse a field value to a number, for example if the value contains a leading and trailing space, the function returns NULL. Use the trim  function to remove leading or trailing spaces. If the tonumber function cannot parse a literal string to a number, it returns an error. 
expression = tonumber(NUMSTR,BASE) tonumber(NUMSTR) 

[sha512]
name = sha512
example =  ... | eval n=sha512(field) 
category = Cryptographic_functions
description =  This function computes and returns the secure hash of a string value X based on the FIPS compliant SHA-512 hash function. 
expression =  sha512(X) 

[sha256]
name = sha256
example =  ... | eval n=sha256(field) 
category = Cryptographic_functions
description =  This function computes and returns the secure hash of a string value X based on the FIPS compliant SHA-256 hash function. 
expression =  sha256(X) 

[sha1]
name = sha1
example =  ... | eval n=sha1(field) 
category = Cryptographic_functions
description =  This function computes and returns the secure hash of a string value X based on the FIPS compliant SHA-1 hash function. 
expression =  sha1(X) 

[md5]
name = md5
example =  ... | eval n=md5(field) 
category = Cryptographic_functions
description =  This function computes and returns the MD5 hash of a string value X. 
expression =  md5(X) 

[time]
name = time
example =  
category = Date_and_Time_functions
description =  This function returns the wall-clock time with microsecond resolution. The value of time() will be different for each event based on when that event was processed by the eval command. 
expression = time() 

[strptime]
name = strptime
example =  If timeStr is in the form, "11:59", this returns it as a timestamp: ... | eval n=strptime(timeStr, "%H:%M") 
category = Date_and_Time_functions
description = This function takes a time represented by a string, X, and parses it into a timestamp using the format specified by Y.  For a list and descriptions of format options, refer to the topic "Common time format variables". 
expression = strptime(X,Y) 

[strftime]
name = strftime
example =  This example returns the hour and minute from the _time field: ... | eval n=strftime(_time, "%H:%M") 
category = Date_and_Time_functions
description = This function takes an epochtime value, X, as the first argument and renders it as a string using the format specified by Y.  For a list and descriptions of format options, refer to the topic "Common time format variables". 
expression = strftime(X,Y) 

[relative_time]
name = relative_time
example = ... | eval n=relative_time(now(), "-1d@d") 
category = Date_and_Time_functions
description =  This function takes an epochtime time, X, as the first argument and a relative time specifier, Y, as the second argument and returns the epochtime value of Y applied to X. 
expression = relative_time(X,Y) 

[now]
name = now
example =  
category = Date_and_Time_functions
description =  This function takes no arguments and returns the time that the search was started. The time is represented in Unix time or in seconds since Epoch time. 
expression = now() 

[typeof]
name = typeof
example =  This example returns "NumberStringBoolInvalid": ... | eval n=typeof(12) + typeof("string") + typeof(1==2) + typeof(badfield) 
category = Informational_functions
description = This function takes one argument and returns a string representation of its type. 
expression = typeof(X) 

[isstr]
name = isstr
example =  ... | eval n=if(isstr(field),"yes","no") or ... | where isstr(field) 
category = Informational_functions
description = This function takes one argument X and returns TRUE if X is a string. 
expression = isstr(X) 

[isnum]
name = isnum
example =  ... | eval n=if(isnum(field),"yes","no") or ... | where isnum(field) 
category = Informational_functions
description = This function takes one argument X and returns TRUE if X is a number. 
expression = isnum(X) 

[isnull]
name = isnull
example =  ... | eval n=if(isnull(field),"yes","no") or ... | where isnull(field) 
category = Informational_functions
description = This function takes one argument X and returns TRUE if X is NULL. 
expression = isnull(X) 

[isnotnull]
name = isnotnull
example =  ... | eval n=if(isnotnull(field),"yes","no") or ... |  where isnotnull(field) 
category = Informational_functions
description = This function takes one argument X and returns TRUE if X is not NULL. This is a useful check for whether or not a field (X) contains a value. 
expression = isnotnull(X) 

[isint]
name = isint
example =  ... | eval n=if(isint(field), "int", "not int") or ... | where isint(field) 
category = Informational_functions
description = This function takes one argument X and returns TRUE if X is an integer. 
expression = isint(X) 

[isbool]
name = isbool
example =  ... | eval n=if(isbool(field),"yes","no") or ... | where isbool(field) 
category = Informational_functions
description = This function takes one argument X and returns TRUE if X is Boolean. 
expression = isbool(X) 

[sqrt]
name = sqrt
example =  This example returns 3: ... | eval n=sqrt(9) 
category = Mathematical_functions
description =  This function takes one numeric argument X and returns its square root. 
expression =  sqrt(X) 

[sigfig]
name = sigfig
example =  1.00*1111 = 1111, but ... | eval n=sigfig(1.00*1111) returns n=1110. 
category = Mathematical_functions
description =  This function takes one argument X, a number, and rounds that number to the appropriate number of significant figures. 
expression =  sigfig(X) 

[round]
name = round
example =  This example returns n=4: ... | eval n=round(3.5) This example returns n=2.56: ... | eval n=round(2.555, 2) 
category = Mathematical_functions
description =  This function takes one or two numeric arguments X and Y, returning X rounded to the amount of decimal places specified by Y. The default is to round to an integer. 
expression =  round(X,Y) 

[pow]
name = pow
example =  ... | eval area_circle=pi()*pow(radius,2) 
category = Mathematical_functions
description =  This function takes two numeric arguments X and Y and returns XY. 
expression =  pow(X,Y) 

[pi]
name = pi
example =  ... | eval area_circle=pi()*pow(radius,2) 
category = Mathematical_functions
description =  This function takes no arguments and returns the constant pi to 11 digits of precision. 
expression =  pi() 

[log]
name = log
example =  ... | eval num=log(number,2) 
category = Mathematical_functions
description =  This function takes either one or two numeric arguments and returns the log of the first argument X using the second argument Y as the base. If the second argument Y is omitted, this function evaluates the log of number X with base 10. 
expression =  log(X,Y) log(X) 

[ln]
name = ln
example =  This example returns the natural log of the values of bytes: ... | eval lnBytes=ln(bytes) 
category = Mathematical_functions
description =  This function takes a number X and returns its natural log. 
expression =  ln(X) 

[floor]
name = floor
example =  This example returns 1: ... | eval n=floor(1.9) 
category = Mathematical_functions
description =  This function rounds a number X down to the nearest whole integer. 
expression =  floor(X) 

[exp]
name = exp
example =  The following example returns y=e3: ... | eval y=exp(3) 
category = Mathematical_functions
description =  This function takes a number X and returns the exponential function eX. 
expression =  exp(X) 

[exact]
name = exact
example =  ... | eval n=exact(3.14 * num) 
category = Mathematical_functions
description =  This function renders the result of a numeric eval calculation with a larger amount of precision in the formatted output. 
expression =  exact(X) 

[ceiling]
name = ceiling
example =  This example returns n=2: ... | eval n=ceil(1.9) 
category = Mathematical_functions
description =  This function rounds a number X up to the next highest integer. 
expression =  ceiling(X) 

[abs]
name = abs
example =  This example returns the absnum, whose values are the absolute values of the numeric field number: ... | eval absnum=abs(number) 
category = Mathematical_functions
description =  This function takes a number X and returns its absolute value. 
expression =  abs(X) 

[mvzip]
name = mvzip
example =  ... | eval nserver=mvzip(hosts,ports) 
category = Multivalue_functions
description =  This function takes two multivalue fields, X and Y, and combines them by stitching together the first value of X with the first value of field Y, then the second with the second, and so on.  The third argument, Z, is optional and is used to specify a delimiting character to join the two values. The default delimiter is a comma. This is similar to Python's zip command. 
expression =  mvzip(X,Y,"Z") 

[mvsort]
name = mvsort
example =  ... | eval s=mvsort(mvfield) 
category = Multivalue_functions
description =  This function uses a multivalue field X and returns a multivalue field with the values sorted lexicographically. 
expression =  mvsort(X) 

[mvrange]
name = mvrange
example =  This example returns a multivalue field with the values 1, 3, 5, 7, 9. ... | eval mv=mvrange(1,11,2) 
category = Multivalue_functions
description =  This function creates a multivalue field for a range of numbers. This function can contain up to three arguments: a starting number X, an ending number Y (exclusive), and an optional step increment Z. If the increment is a timespan such as '7'd, the starting and ending numbers are treated as epoch times. 
expression =  mvrange(X,Y,Z) 

[mvjoin]
name = mvjoin
example =  This example joins together the individual values of "foo" using a semicolon as the delimiter: ... | eval n=mvjoin(foo, ";") 
category = Multivalue_functions
description =  This function takes two arguments, multivalue field MVFIELD and string delimiter STR. The function concatenates the individual values of MVFIELD with copies of STR in between as separators. 
expression =  mvjoin(MVFIELD,STR) 

[mvindex]
name = mvindex
example =  Since indexes start at zero, this example returns the third value in "multifield", if it exists: ... | eval n=mvindex(multifield, 2) 
category = Multivalue_functions
description =  This function takes two or three arguments, field MVFIELD and numbers STARTINDEX and ENDINDEX, and returns a subset of the multivalue field using the indexes provided. For mvindex(mvfield, startindex, [endindex]), endindex is inclusive and optional. Both startindex and endindex can be negative, where -1 is the last element. If endindex is not specified, it returns only the value at startindex. If the indexes are out of range or invalid, the result is NULL.  
expression =  mvindex(MVFIELD,STARTINDEX, ENDINDEX) mvindex(MVFIELD,STARTINDEX) 

[mvfind]
name = mvfind
example =  ... | eval n=mvfind(mymvfield, "err\d+") 
category = Multivalue_functions
description =  This function tries to find a value in multivalue field X that matches the regular expression REGEX. If a match exists, the index of the first matching value is returned (beginning with zero). If no values match, NULL is returned. 
expression =  mvfind(MVFIELD,"REGEX") 

[mvfilter]
name = mvfilter
example =  This example returns all of the values in field email that end in .net or .org: ... | eval n=mvfilter(match(email, "\.net$") OR match(email, "\.org$")) 
category = Multivalue_functions
description =  This function filters a multivalue field based on an arbitrary Boolean expression X. The Boolean expression X can reference ONLY ONE field at a time. Note:This function will return NULL values of the field x as well. If you don't want the NULL values, use the expression: mvfilter(x!=NULL). 
expression =  mvfilter(X) 

[mvdedup]
name = mvdedup
example =  ... | eval s=mvdedup(mvfield) 
category = Multivalue_functions
description =  This function takes a multivalue field X and returns a multivalue field with its duplicate values removed. 
expression =  mvdedup(X) 

[mvcount]
name = mvcount
example =  ... | eval n=mvcount(multifield) 
category = Multivalue_functions
description =  This function takes a field MVFIELD. The function returns the number of values if it is a multivalue, 1 if it is a single value field, and NULL otherwise. 
expression =  mvcount(MVFIELD) 

[mvappend]
name = mvappend
example =  ... | eval fullName=mvappend(initial_values, "middle value", last_values) 
category = Multivalue_functions
description =  This function takes an arbitrary number of arguments and returns a multivalue result of all the values. The arguments can be strings, multivalue fields or single value fields. 
expression =  mvappend(X,...) 

[commands]
name = commands
example =  ... | eval x=commands("search foo  | stats count  | sort count") returns a multivalued field X, that contains 'search', 'stats', and 'sort'. 
category = Multivalue_functions
description =  This function takes a search string, or field that contains a search string, X and returns a multivalued field containing a list of the commands used in X. (This is generally not recommended for use except for analysis of audit.log events.) 
expression =  commands(X) 

[urldecode]
name = urldecode
example =  This example returns "http://www.splunk.com/download?r=header": ... | eval n=urldecode("http%3A%2F%2Fwww.splunk.com %2Fdownload%3Fr%3Dheader") 
category = Text_functions
description =  This function takes one URL string argument X and returns the unescaped or decoded URL string. 
expression =  urldecode(X) 

[upper]
name = upper
example =  This example returns the value provided by the field username in uppercase. ... | eval n=upper(username) 
category = Text_functions
description =  This function takes one string argument and returns the uppercase version. The lower() function also exists for returning the lowercase version. 
expression =  upper(X) 

[trim]
name = trim
example =  This example returns "abc": ... | eval n=trim("   ZZZZabcZZ ", " Z") 
category = Text_functions
description =  This function takes one or two arguments X and Y and returns X with the characters in Y trimmed from both sides. If Y is not specified, spaces and tabs are removed. 
expression =  trim(X,Y) trim(X) 

[substr]
name = substr
example =  This example concatenates "str" and "ing" together, returning "string": ... | eval n=substr("string", 1, 3) + substr("string", -3) 
category = Text_functions
description =  This function takes either two or three arguments, where X is a string and Y and Z are numeric. It returns a substring of X, starting at the index specified by Y with the number of characters specified by Z. If Z is not given, it returns the rest of the string. The indexes follow SQLite semantics; they start at 1. Negative indexes can be used to indicate a start from the end of the string. 
expression =  substr(X,Y,Z) 

[split]
name = split
example =  ... | eval n=split(foo, ";") 
category = Text_functions
description =  This function takes two arguments, field X and delimiting character Y. It splits the value(s) of X on the delimiter Y and returns X as a multivalue field. 
expression = split(X,"Y") 

[spath]
name = spath
example =  This example returns the values of locDesc elements: ... | eval locDesc=spath(_raw, "vendorProductSet.product.desc.locDesc") This example returns the hashtags from a twitter event: index=twitter | eval output=spath(_raw, "entities.hashtags") 
category = Text_functions
description =  This function takes two arguments: an input source field X and an spath expression Y, that is the XML or JSON formatted location path to the value that you want to extract from X. If Y is a literal string, it needs quotes, spath(X,"Y"). If Y is a field name (with values that are the location paths), it doesn't need quotes. This may result in a multivalued field. Read more about the spath search command. 
expression = spath(X,Y) 

[rtrim]
name = rtrim
example =  This example returns n="ZZZZabc": ... | eval n=rtrim("   ZZZZabcZZ ", " Z") 
category = Text_functions
description =  This function takes one or two arguments X and Y and returns X with the characters in Y trimmed from the right side. If Y is not specified, spaces and tabs are removed. 
expression =  rtrim(X,Y) rtrim(X) 

[replace]
name = replace
example =  This example returns date with the month and day numbers switched, so if the input was 1/14/2015 the return value would be 14/1/2015: ... | eval n=replace(date, "^(\d{1,2})/(\d{1,2})/", "\2/\1/") 
category = Text_functions
description =  This function returns a string formed by substituting string Z for every occurrence of regex string Y in string X. The third argument Z can also reference groups that are matched in the regex. 
expression =  replace(X,Y,Z) 

[ltrim]
name = ltrim
example =  This example returns x="abcZZ": ... | eval x=ltrim("   ZZZZabcZZ ", " Z")  
category = Text_functions
description =  This function takes one or two arguments X and Y and returns X with the characters in Y trimmed from the left side. If Y is not specified, spaces and tabs are removed. 
expression =  ltrim(X,Y) ltrim(X) 

[lower]
name = lower
example =  This example returns the value provided by the field username in lowercase. ... | eval username=lower(username) 
category = Text_functions
description =  This function takes one string argument and returns the lowercase version. The upper() function also exists for returning the uppercase version. 
expression =  lower(X) 

[len]
name = len
example =  ... | eval n=len(field) 
category = Text_functions
description =  This function returns the character length of a string X. 
expression =  len(X) 

[tanh]
name = tanh
example =  ... | eval n=tanh(1) 
category = Trigonometry_and_Hyperbolic_functions
description =  This function computes the hyperbolic tangent. 
expression =  tanh(X) 

[tan]
name = tan
example =  ... | eval n=tan(1) 
category = Trigonometry_and_Hyperbolic_functions
description =  This function computes the tangent. 
expression =  tan(X) 

[sinh]
name = sinh
example =  ... | eval n=sinh(1) 
category = Trigonometry_and_Hyperbolic_functions
description =  This function computes the hyperbolic sine. 
expression =  sinh(X) 

[sin]
name = sin
example =  ... | eval n=sin(1) ... | eval n=sin(90 * pi()/180) 
category = Trigonometry_and_Hyperbolic_functions
description =  This function computes the sine. 
expression =  sin(X) 

[hypot]
name = hypot
example =  ... | eval n=hypot(3,4) 
category = Trigonometry_and_Hyperbolic_functions
description =  This function computes the hypotenuse of a right-angled triangle whose legs are X and Y. The function returns the square root of the sum of the squares of X and Y, as described in the Pythagorean theorem. 
expression =  hypot(X,Y) 

[cosh]
name = cosh
example =  ... | eval n=cosh(1) 
category = Trigonometry_and_Hyperbolic_functions
description =  This function computes the hyperbolic cosine of X radians. 
expression =  cosh(X) 

[cos]
name = cos
example =  ... | eval n=cos(-1) ... | eval n=cos(pi()) 
category = Trigonometry_and_Hyperbolic_functions
description =  This function computes the cosine of an angle of X radians. 
expression =  cos(X) 

[atanh]
name = atanh
example =  ... | eval n=atanh(0.500) 
category = Trigonometry_and_Hyperbolic_functions
description =  This function computes the arc hyperbolic tangent of X, in radians. 
expression =  atanh(X) 

[atan2]
name = atan2
example =  .. | eval n=atan2(0.50, 0.75) 
category = Trigonometry_and_Hyperbolic_functions
description =  This function computes the arc tangent of Y, X in the interval [-pi,+pi] radians. Y is a value that represents the proportion of the y-coordinate.  X is the value that represents the proportion of the x-coordinate. To compute the value, the function takes into account the sign of both arguments to determine the quadrant. 
expression =  atan2(Y, X) 

[atan]
name = atan
example =  ... | eval n=atan(0.50) 
category = Trigonometry_and_Hyperbolic_functions
description =  This function computes the arc tangent of X, in the interval [-pi/2,+pi/2] radians. 
expression =  atan(X) 

[asinh]
name = asinh
example =  ... |  eval n=asinh(1) 
category = Trigonometry_and_Hyperbolic_functions
description =  This function computes the arc hyperbolic sine of X, in radians. 
expression =  asinh(X) 

[asin]
name = asin
example =  ... |  eval n=asin(1) ... |  eval degrees=asin(1)*180/pi() 
category = Trigonometry_and_Hyperbolic_functions
description =  This function computes the arc sine of X, in the interval [-pi/2,+pi/2] radians. 
expression =  asin(X) 

[acosh]
name = acosh
example =  ... | eval n=acosh(2) 
category = Trigonometry_and_Hyperbolic_functions
description =  This function computes the arc hyperbolic cosine of X, in radians. 
expression =  acosh(X) 

[acos]
name = acos
example =  ... | eval n=acos(0) ... | eval degrees=acos(0)*180/pi() 
category = Trigonometry_and_Hyperbolic_functions
description =  This function computes the arc cosine of X, in the interval [0,pi] radians. 
expression =  acos(X) 

