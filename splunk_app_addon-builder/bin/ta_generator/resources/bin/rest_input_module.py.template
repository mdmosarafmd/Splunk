<%
import re
from ta_generator.builder_util import escape_character
%>
# encoding = utf-8

import os
import sys
import time
import datetime
try:
    import HTMLParser
except ImportError:
    from html import parser as HTMLParser
import json
import urllib
import requests
import mako.template
import traceback
import logging

from splunklib import modularinput as smi
from splunk_aoblib import utility

# this is very hacky, we need to put the set log before importing CloudConnectClient
# logger is a singlten. Should be fixed in CC
from cloudconnectlib.common.log import set_cc_logger

# set up log, write all logs to stderr
set_cc_logger(utility.get_stderr_stream_logger(logger_name="test_${datainput['name']}", log_level=logging.DEBUG), logger_prefix='[{}]'.format('test'))

from cloudconnectlib.client import CloudConnectClient
from cloudconnectlib.core.pipemgr import PipeManager



'''
    This file is auto generated by Add-on Builder.
    This file is only used to test CC based rest data input.
    The final CC based rest data input python code is not like this.
    CC does not provide test mode. AoB has to do this hack.
'''
def get_input_arguments():
    arguments = []
    % for data_inputs_option in datainput['data_inputs_options']:
    %   if data_inputs_option.get('type', '') == 'customized_var':
    arguments.append(smi.Argument("${data_inputs_option['name']|escape_character}", title="${data_inputs_option['title']|escape_character}",
                                     description="${re.sub("([\\r\\n]+)", "", data_inputs_option['description']).strip()|escape_character}",
                                     required_on_create=${{1:True,0:False}[data_inputs_option['required_on_create']]},
                                     required_on_edit=False))
    %   endif
    % endfor
    return arguments

def translate_arg(temp_string, param_dict):
    t = mako.template.Template(temp_string)
    return t.render(**param_dict)

def validate_input(helper, definition):
    """overloaded splunklib modularinput method"""
    pass

def no_op(*args, **kwarg):
    pass

def collect_events(helper, ew):
    """overloaded splunklib modularinput method"""
    # Important!
    # replace the event writer close function.
    # cc engine will format the events and flush to stdout
    setattr(ew, 'close', no_op)

    # use CC low level client to dry run
    input_type = helper.get_input_type
    # prepare the task_config.
    # the task_config structure depends on the CC implementation.
    # this is so stupid! But I have no better idea. There are too many hard coded strings in this part

    task_config = {}
    stanzas = helper.get_input_stanza()
    for k, v in stanzas.items():
        s = dict(v)
        s['name'] = k
        task_config.update(s)
    # need to process configs just like what CC does
    task_config['__configs__'] = helper.global_setup_util.get_ucc_account_config()
    # need to process the settings just like what CC does
    settings = {}
    settings.update(helper.global_setup_util.get_ucc_log_setting())
    settings.update(helper.global_setup_util.get_ucc_proxy_setting())
    settings.update(helper.global_setup_util.get_ucc_customized_setting())
    task_config['__settings__'] = settings

    cc_json_file = "${datainput['cc_json_file']}"
    cli = CloudConnectClient(task_config, cc_json_file, None) # ckpt mgr is None for testing
    cli.start()
