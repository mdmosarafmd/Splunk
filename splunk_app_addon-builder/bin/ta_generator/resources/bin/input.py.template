import ${python_declare}

import os
import sys
import time
import datetime
import json

import modinput_wrapper.base_modinput
from solnlib.packages.splunklib import modularinput as smi

<%
import re
from ta_generator.builder_util import escape_character
%>

import ${module_name} as input_module

bin_dir = os.path.basename(__file__)

'''
    Do not edit this file!!!
    This file is generated by Add-on builder automatically.
    Add your modular input logic to file input_module_${datainput['name']|escape_character}.py
'''
class ModInput${datainput['name']|escape_character}(modinput_wrapper.base_modinput.BaseModInput):

    def __init__(self):
        if 'use_single_instance_mode' in dir(input_module):
            use_single_instance = input_module.use_single_instance_mode()
        else:
            use_single_instance = False
        super(ModInput${datainput['name']|escape_character}, self).__init__("${app_namespace|escape_character}", "${datainput['name']|escape_character}", use_single_instance)
        self.global_checkbox_fields = None

    def get_scheme(self):
        """overloaded splunklib modularinput method"""
        scheme = super(ModInput${datainput['name']|escape_character}, self).get_scheme()
        scheme.title = ("${re.sub("([\r\n]+)", "", datainput['title']).strip()|escape_character}")
        scheme.description = ("${("Go to the add-on's configuration UI and configure modular inputs under the Inputs menu.")|escape_character}")
        scheme.use_external_validation = ${datainput['use_external_validation']}
        scheme.streaming_mode_xml = ${datainput['streaming_mode_xml']}

        scheme.add_argument(smi.Argument("name", title="Name",
                                         description="",
                                         required_on_create=True))

        """
        For customized inputs, hard code the arguments here to hide argument detail from users.
        For other input types, arguments should be get from input_module. Defining new input types could be easier.
        """
        % if datainput['type'] == 'customized':
        %   for data_inputs_option in datainput['data_inputs_options']:
        scheme.add_argument(smi.Argument("${data_inputs_option['name']|escape_character}", title="${data_inputs_option['title']|escape_character}",
                                         description="${re.sub("([\r\n]+)", "", data_inputs_option['description']).strip()|escape_character}",
                                         required_on_create=${{1:True,0:False}[data_inputs_option['required_on_create']]},
                                         required_on_edit=False))
        %   endfor
        % else:
        for input_arg in input_module.get_input_arguments():
            scheme.add_argument(input_arg)
        % endif
        return scheme

    def get_app_name(self):
        return "${app_name}"

    def validate_input(self, definition):
        """validate the input stanza"""
        input_module.validate_input(self, definition)

    def collect_events(self, ew):
        """write out the events"""
        input_module.collect_events(self, ew)

    def get_account_fields(self):
        account_fields = []
        % for option in datainput['data_inputs_options']:
        %   if option.get('type') == 'customized_var' and option.get('format_type') == 'global_account':
        account_fields.append("${option['name']}")
        %   endif
        % endfor
        return account_fields

    def get_checkbox_fields(self):
        checkbox_fields = []
        % for option in datainput['data_inputs_options']:
        %   if option.get('type') == 'customized_var' and option.get('format_type') == 'checkbox':
        checkbox_fields.append("${option['name']}")
        %   endif
        % endfor
        return checkbox_fields

    def get_global_checkbox_fields(self):
        if self.global_checkbox_fields is None:
            checkbox_name_file = os.path.join(bin_dir, 'global_checkbox_param.json')
            try:
                if os.path.isfile(checkbox_name_file):
                    with open(checkbox_name_file, 'r') as fp:
                        self.global_checkbox_fields = json.load(fp)
                else:
                    self.global_checkbox_fields = []
            except Exception as e:
                self.log_error('Get exception when loading global checkbox parameter names. ' + str(e))
                self.global_checkbox_fields = []
        return self.global_checkbox_fields

if __name__ == "__main__":
    exitcode = ModInput${datainput['name']|escape_character}().run(sys.argv)
    sys.exit(exitcode)
